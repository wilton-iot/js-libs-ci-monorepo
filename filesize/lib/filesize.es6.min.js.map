{"version":3,"sources":["filesize.es6.js"],"names":["Math","pow","floor","log","isNaN","Error","bits","unix","base","round","spacer","symbols","suffixes","standard","output","fullform","fullforms","Array","exponent","toFixed","charAt","replace","test","value","suffix","symbol","join","iec","bytes","jedec","partial","exports","define","amd","filesize","module","window","global"],"mappings":"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","file":"unknown","sourcesContent":["/**\n * filesize\n *\n * @copyright 2017 Jason Mulligan <jason.mulligan@avoidwork.com>\n * @license BSD-3-Clause\n * @version 3.5.11\n */\n(function (global) {\n\tconst b = /^(b|B)$/,\n\t\tsymbol = {\n\t\t\tiec: {\n\t\t\t\tbits: [\"b\", \"Kib\", \"Mib\", \"Gib\", \"Tib\", \"Pib\", \"Eib\", \"Zib\", \"Yib\"],\n\t\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t\t},\n\t\t\tjedec: {\n\t\t\t\tbits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n\t\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t\t}\n\t\t},\n\t\tfullform = {\n\t\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t\t};\n\n\t/**\n\t * filesize\n\t *\n\t * @method filesize\n\t * @param  {Mixed}   arg        String, Int or Float to transform\n\t * @param  {Object}  descriptor [Optional] Flags\n\t * @return {String}             Readable file size String\n\t */\n\tfunction filesize (arg, descriptor = {}) {\n\t\tlet result = [],\n\t\t\tval = 0,\n\t\t\te, base, bits, ceil, full, fullforms, neg, num, output, round, unix, spacer, standard, symbols;\n\n\t\tif (isNaN(arg)) {\n\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t}\n\n\t\tbits = descriptor.bits === true;\n\t\tunix = descriptor.unix === true;\n\t\tbase = descriptor.base || 2;\n\t\tround = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;\n\t\tspacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? \"\" : \" \";\n\t\tsymbols = descriptor.symbols || descriptor.suffixes || {};\n\t\tstandard = base === 2 ? descriptor.standard || \"jedec\" : \"jedec\";\n\t\toutput = descriptor.output || \"string\";\n\t\tfull = descriptor.fullform === true;\n\t\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\n\t\te = descriptor.exponent !== undefined ? descriptor.exponent : -1;\n\t\tnum = Number(arg);\n\t\tneg = num < 0;\n\t\tceil = base > 2 ? 1000 : 1024;\n\n\t\t// Flipping a negative number to determine the size\n\t\tif (neg) {\n\t\t\tnum = -num;\n\t\t}\n\n\t\t// Determining the exponent\n\t\tif (e === -1 || isNaN(e)) {\n\t\t\te = Math.floor(Math.log(num) / Math.log(ceil));\n\n\t\t\tif (e < 0) {\n\t\t\t\te = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Exceeding supported length, time to reduce & multiply\n\t\tif (e > 8) {\n\t\t\te = 8;\n\t\t}\n\n\t\t// Zero is now a special case because bytes divide by 1\n\t\tif (num === 0) {\n\t\t\tresult[0] = 0;\n\t\t\tresult[1] = unix ? \"\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\t\t} else {\n\t\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\n\n\t\t\tif (bits) {\n\t\t\t\tval = val * 8;\n\n\t\t\t\tif (val >= ceil && e < 8) {\n\t\t\t\t\tval = val / ceil;\n\t\t\t\t\te++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[0] = Number(val.toFixed(e > 0 ? round : 0));\n\t\t\tresult[1] = base === 10 && e === 1 ? bits ? \"kb\" : \"kB\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\n\t\t\tif (unix) {\n\t\t\t\tresult[1] = standard === \"jedec\" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, \"\") : result[1];\n\n\t\t\t\tif (b.test(result[1])) {\n\t\t\t\t\tresult[0] = Math.floor(result[0]);\n\t\t\t\t\tresult[1] = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Decorating a 'diff'\n\t\tif (neg) {\n\t\t\tresult[0] = -result[0];\n\t\t}\n\n\t\t// Applying custom symbol\n\t\tresult[1] = symbols[result[1]] || result[1];\n\n\t\t// Returning Array, Object, or String (default)\n\t\tif (output === \"array\") {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (output === \"exponent\") {\n\t\t\treturn e;\n\t\t}\n\n\t\tif (output === \"object\") {\n\t\t\treturn {value: result[0], suffix: result[1], symbol: result[1]};\n\t\t}\n\n\t\tif (full) {\n\t\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\n\t\t}\n\n\t\treturn result.join(spacer);\n\t}\n\n\t// Partial application for functional programming\n\tfilesize.partial = opt => arg => filesize(arg, opt);\n\n\t// CommonJS, AMD, script tag\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = filesize;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(() => {\n\t\t\treturn filesize;\n\t\t});\n\t} else {\n\t\tglobal.filesize = filesize;\n\t}\n}(typeof window !== \"undefined\" ? window : global));\n"]}